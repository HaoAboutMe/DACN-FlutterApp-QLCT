import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:flutter/foundation.dart';

class NotificationHelper {
  static final FlutterLocalNotificationsPlugin _notificationsPlugin =
  FlutterLocalNotificationsPlugin();

  /// Kh·ªüi t·∫°o th√¥ng b√°o (g·ªçi khi m·ªü app)
  static Future<void> initialize() async {
    // üïí Kh·ªüi t·∫°o timezone cho Vi·ªát Nam (GMT+7) TR∆Ø·ªöC KHI kh·ªüi t·∫°o plugin
    tz.initializeTimeZones();
    tz.setLocalLocation(tz.getLocation('Asia/Ho_Chi_Minh'));

    const AndroidInitializationSettings androidInitSettings =
    AndroidInitializationSettings('@mipmap/ic_launcher');

    const InitializationSettings initSettings =
    InitializationSettings(android: androidInitSettings);

    await _notificationsPlugin.initialize(
      initSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) {
        debugPrint('Notification clicked: ${response.payload}');
      },
    );

    // ‚úÖ Y√äU C·∫¶U QUY·ªÄN TH√îNG B√ÅO CHO ANDROID 13+
    await _notificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.requestNotificationsPermission();

    // ‚úÖ T·∫†O NOTIFICATION CHANNEL (B·∫ÆT BU·ªòC CHO ANDROID 8.0+)
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'daily_reminder_channel', // ID ph·∫£i kh·ªõp v·ªõi ID trong scheduleDailyNotification
      'Daily Reminders', // T√™n hi·ªÉn th·ªã
      description: 'Th√¥ng b√°o nh·∫Øc nh·ªü nh·∫≠p giao d·ªãch m·ªói ng√†y',
      importance: Importance.high,
      playSound: true,
      enableVibration: true,
    );

    await _notificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);

    debugPrint('‚úÖ Notification Helper ƒë√£ kh·ªüi t·∫°o xong');
  }

  /// G·ª≠i th√¥ng b√°o ngay l·∫≠p t·ª©c (test nhanh)
  static Future<void> showInstantNotification({
    required String title,
    required String body,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'daily_reminder_channel',
      'Daily Reminders',
      channelDescription: 'Th√¥ng b√°o nh·∫Øc nh·ªü nh·∫≠p giao d·ªãch m·ªói ng√†y',
      importance: Importance.max,
      priority: Priority.high,
    );

    await _notificationsPlugin.show(
      0,
      title,
      body,
      const NotificationDetails(android: androidDetails),
    );
  }

  /// L√™n l·ªãch th√¥ng b√°o h·∫±ng ng√†y v√†o gi·ªù nh·∫•t ƒë·ªãnh
  static Future<void> scheduleDailyNotification({
    required int hour,
    required int minute,
  }) async {
    // H·ªßy th√¥ng b√°o c≈© tr∆∞·ªõc
    await cancelDailyNotification();

    final scheduledTime = _nextInstanceOfTime(hour, minute);
    final now = tz.TZDateTime.now(tz.local);

    debugPrint('üïê Gi·ªù hi·ªán t·∫°i (VN): ${now.toString()}');
    debugPrint('‚è∞ Gi·ªù ƒë·∫∑t l·ªãch (VN): ${scheduledTime.toString()}');
    debugPrint('‚è±Ô∏è C√≤n ${scheduledTime.difference(now).inMinutes} ph√∫t n·ªØa ƒë·∫øn gi·ªù th√¥ng b√°o');

    await _notificationsPlugin.zonedSchedule(
      0,
      'üêã Whales Spent nh·∫Øc nh·ªü',
      'ƒê·ª´ng qu√™n ghi l·∫°i giao d·ªãch c·ªßa b·∫°n h√¥m nay nh√©!',
      scheduledTime,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'daily_reminder_channel',
          'Daily Reminders',
          channelDescription: 'Th√¥ng b√°o nh·∫Øc nh·ªü nh·∫≠p giao d·ªãch m·ªói ng√†y',
          importance: Importance.max,
          priority: Priority.high,
          playSound: true,
          enableVibration: true,
          enableLights: true,
          icon: '@mipmap/ic_launcher',
          channelShowBadge: true,
          visibility: NotificationVisibility.public,
        ),
      ),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
      UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );

    // Ki·ªÉm tra pending notifications
    final pendingNotifications = await _notificationsPlugin.pendingNotificationRequests();
    debugPrint('‚úÖ ƒê√£ ƒë·∫∑t l·ªãch th√¥ng b√°o h·∫±ng ng√†y l√∫c: $hour:${minute.toString().padLeft(2, '0')} (Gi·ªù VN)');
    debugPrint('üìã S·ªë th√¥ng b√°o ƒëang ch·ªù: ${pendingNotifications.length}');

    for (var notification in pendingNotifications) {
      debugPrint('   - ID: ${notification.id}, Title: ${notification.title}');
    }
  }

  static Future<void> cancelDailyNotification() async {
    await _notificationsPlugin.cancel(0);
    debugPrint('üóëÔ∏è ƒê√£ h·ªßy th√¥ng b√°o h·∫±ng ng√†y');
  }

  /// Ki·ªÉm tra quy·ªÅn exact alarm (Android 12+)
  static Future<bool> checkExactAlarmPermission() async {
    final androidImpl = _notificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();

    if (androidImpl != null) {
      final canScheduleExactAlarms = await androidImpl.canScheduleExactNotifications();
      debugPrint('üîê Quy·ªÅn Exact Alarm: ${canScheduleExactAlarms == true ? "ƒê√É C·∫§P" : "CH∆ØA C·∫§P"}');
      return canScheduleExactAlarms ?? false;
    }

    return true; // Gi·∫£ s·ª≠ c√≥ quy·ªÅn n·∫øu kh√¥ng ph·∫£i Android
  }

  /// Y√™u c·∫ßu quy·ªÅn exact alarm (Android 12+)
  static Future<void> requestExactAlarmPermission() async {
    final androidImpl = _notificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();

    if (androidImpl != null) {
      final canSchedule = await androidImpl.canScheduleExactNotifications();
      if (canSchedule == false) {
        debugPrint('‚ö†Ô∏è Ch∆∞a c√≥ quy·ªÅn Exact Alarm, c·∫ßn m·ªü Settings ƒë·ªÉ c·∫•p quy·ªÅn');
        // ·ª®ng d·ª•ng c·∫ßn h∆∞·ªõng d·∫´n user v√†o Settings ƒë·ªÉ b·∫≠t quy·ªÅn
      }
    }
  }

  static tz.TZDateTime _nextInstanceOfTime(int hour, int minute) {
    final now = tz.TZDateTime.now(tz.local);
    var scheduled = tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);
    if (scheduled.isBefore(now)) {
      scheduled = scheduled.add(const Duration(days: 1));
    }
    return scheduled;
  }
}
